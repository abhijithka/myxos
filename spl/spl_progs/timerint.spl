//print " 	In timer";
alias cur_pid S1 ;
cur_pid = (PTBR-PAGE_TABLE)/8 ;
alias cur_pcb S2 ;
cur_pcb = READY_LIST+cur_pid*32 ;
// print [cur_pcb];
[cur_pcb + 1] = 1 ;
[cur_pcb + 2] = BP ;
[cur_pcb +3] = SP-1 ;
alias phy_SP S3 ;
phy_SP = ([PTBR+((SP/512)*2)]*512) + (SP%512) ;
[cur_pcb + 4] = [phy_SP] ;
[cur_pcb + 5] = PTBR ;
[cur_pcb + 6] = PTLR ;
[cur_pcb + 7] = R0 ;
[cur_pcb + 8] = R1 ;
[cur_pcb + 9] = R2 ;
[cur_pcb + 10] = R3 ;
[cur_pcb + 11] = R4 ;
[cur_pcb + 12] = R5 ;
[cur_pcb + 13] = R6 ;
[cur_pcb + 14] = R7 ;
alias new_pcb S4 ;
alias mod S6 ;
mod = READY_LIST + 32*32 ;
new_pcb = cur_pcb+32;
while ([new_pcb+1] != 1) do
	if (new_pcb == mod) then
		new_pcb = READY_LIST ;
	else 
		new_pcb = new_pcb + 32 ;
	endif ;
endwhile ;
[new_pcb + 1] = 2 ;
BP = [new_pcb + 2] ;
SP = [new_pcb + 3] ;
PTBR = [new_pcb + 5] ;
PTLR = [new_pcb + 6] ;
R0 = [new_pcb + 7] ;
R1 = [new_pcb + 8] ;
R2 = [new_pcb + 9] ;
R3 = [new_pcb + 10] ;
R4 = [new_pcb + 11] ;
R5 = [new_pcb + 12] ;
R6 = [new_pcb + 13] ;
R7 = [new_pcb + 14] ;
alias p_SP S5 ;
SP = SP+1 ;
p_SP = ([PTBR+(SP/512)*2]*512 + (SP%512)) ;
[p_SP] = [new_pcb + 4] ;
// print [cur_pcb];
// print [new_pcb];
// print [cur_pcb+1];
// print [new_pcb+1];
// print [new_pcb+1];
// print IP;
//print " 	End timer";
ireturn ; 


